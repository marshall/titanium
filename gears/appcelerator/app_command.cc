/*
 * WARNING this file was generated by Titanium's idlgen
 */
#include "gears/appcelerator/app_command.h"
#include "gears/appcelerator/ruby_util.h"
#include "gears/appcelerator/appcelerator.h"
#include <unistd.h>

DECLARE_DISPATCHER(AppCommand);

 
template<>
void Dispatcher<AppCommand>::Init() 
{
	RegisterMethod("App", &AppCommand::App);
	RegisterMethod("Sleep", &AppCommand::Sleep);
}

const std::string AppCommand::kModuleName("AppCommand");

AppCommand *appC;

AppCommand::AppCommand() : ModuleImplBaseClass(kModuleName) {
	appC = this;
}

AppCommand::~AppCommand() { }

void AppCommand::App (JsCallContext *context)
{
	debug("AppCommand::App\n");
	std::string16 path;
	JsObject options;	
	JsObject appCallback;
	
	JsArgument argv[] = {
		{ JSPARAM_REQUIRED, JSPARAM_STRING16, &path },
		{ JSPARAM_REQUIRED, JSPARAM_OBJECT, &options },
		{ JSPARAM_REQUIRED, JSPARAM_OBJECT, &appCallback }
	};
	
	context->GetArguments(ARRAYSIZE(argv), argv);
	if (context->is_exception_set()) {
		return;
	}
	
	this->jsObject = &appCallback;
	this->appOptions = &options;
	
	if (path[path.size()-1] != '/') path += STRING16(L"/");
	path += STRING16(L"titanium/appcelerator");
	
	RunScript(this, String16ToUTF8(path).c_str());
}

void AppCommand::Sleep (JsCallContext *context)
{
	debug("AppCommand::Sleep\n");
	
	int ms;
	JsArgument argv[] = {
		{ JSPARAM_REQUIRED, JSPARAM_INT, &ms }
	};
	
	context->GetArguments(ARRAYSIZE(argv), argv);
	if (context->is_exception_set()) return;
	
	usleep(ms);
}


extern "C" void TitaniumBoot_free (void *p) {

}

extern "C" VALUE TitaniumBoot_new (VALUE klass) {
	VALUE data = Data_Wrap_Struct(klass, 0, TitaniumBoot_free, appC);
	
	return data;
}


extern "C" VALUE TitaniumBoot_confirm (
	VALUE self, 
	VALUE message, 
	VALUE canForce)
{
	debug("TitaniumBoot.confirm\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		JsRootedToken *token;
		VALUE argv[] = {message, canForce};


		
		if (InvokeJsCallback(command, command->jsObject, "confirm",
			ARRAYSIZE(argv), argv, &token))
		{
			debug("TitaniumBoot.confirm succeeded.\n");
			return JsRootedTokenToRubyValue(token, JSPARAM_STRING16);
		} else { debug("TitaniumBoot.confirm failed.\n"); }
	}
	return Qnil;
}

extern "C" VALUE TitaniumBoot_confirmInstallComponents (
	VALUE self, 
	VALUE components)
{
	debug("TitaniumBoot.confirmInstallComponents\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		JsRootedToken *token;
		VALUE argv[] = {components};


		
		if (InvokeJsCallback(command, command->jsObject, "confirmInstallComponents",
			ARRAYSIZE(argv), argv, &token))
		{
			debug("TitaniumBoot.confirmInstallComponents succeeded.\n");
			return JsRootedTokenToRubyValue(token, JSPARAM_STRING16);
		} else { debug("TitaniumBoot.confirmInstallComponents failed.\n"); }
	}
	return Qnil;
}

extern "C" VALUE TitaniumBoot_info (
	VALUE self, 
	VALUE message)
{
	debug("TitaniumBoot.info\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		VALUE argv[] = {message};


		
		if (InvokeJsCallback(command, command->jsObject, "info",
			ARRAYSIZE(argv), argv, NULL))
		{
			debug("TitaniumBoot.info succeeded.\n");
		} else { debug("TitaniumBoot.info failed.\n"); }
	}
	return Qnil;
}

extern "C" VALUE TitaniumBoot_debug (
	VALUE self, 
	VALUE message)
{
	debug("TitaniumBoot.debug\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		VALUE argv[] = {message};


		
		if (InvokeJsCallback(command, command->jsObject, "debug",
			ARRAYSIZE(argv), argv, NULL))
		{
			debug("TitaniumBoot.debug succeeded.\n");
		} else { debug("TitaniumBoot.debug failed.\n"); }
	}
	return Qnil;
}

extern "C" VALUE TitaniumBoot_error (
	VALUE self, 
	VALUE message)
{
	debug("TitaniumBoot.error\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		VALUE argv[] = {message};


		
		if (InvokeJsCallback(command, command->jsObject, "error",
			ARRAYSIZE(argv), argv, NULL))
		{
			debug("TitaniumBoot.error succeeded.\n");
		} else { debug("TitaniumBoot.error failed.\n"); }
	}
	return Qnil;
}

extern "C" VALUE TitaniumBoot_die (
	VALUE self, 
	VALUE message)
{
	debug("TitaniumBoot.die\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		VALUE argv[] = {message};


		
		if (InvokeJsCallback(command, command->jsObject, "die",
			ARRAYSIZE(argv), argv, NULL))
		{
			debug("TitaniumBoot.die succeeded.\n");
		} else { debug("TitaniumBoot.die failed.\n"); }
	}
	return Qnil;
}

extern "C" VALUE TitaniumBoot_askForProxy (
	VALUE self)
{
	debug("TitaniumBoot.askForProxy\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		VALUE argv[] = {};


		
		if (InvokeJsCallback(command, command->jsObject, "askForProxy",
			ARRAYSIZE(argv), argv, NULL))
		{
			debug("TitaniumBoot.askForProxy succeeded.\n");
		} else { debug("TitaniumBoot.askForProxy failed.\n"); }
	}
	return Qnil;
}

extern "C" VALUE TitaniumBoot_showLoginForm (
	VALUE self)
{
	debug("TitaniumBoot.showLoginForm\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		VALUE argv[] = {};


		
		if (InvokeJsCallback(command, command->jsObject, "showLoginForm",
			ARRAYSIZE(argv), argv, NULL))
		{
			debug("TitaniumBoot.showLoginForm succeeded.\n");
		} else { debug("TitaniumBoot.showLoginForm failed.\n"); }
	}
	return Qnil;
}

extern "C" VALUE TitaniumBoot_showLoginFormError (
	VALUE self, 
	VALUE message)
{
	debug("TitaniumBoot.showLoginFormError\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		VALUE argv[] = {message};


		
		if (InvokeJsCallback(command, command->jsObject, "showLoginFormError",
			ARRAYSIZE(argv), argv, NULL))
		{
			debug("TitaniumBoot.showLoginFormError succeeded.\n");
		} else { debug("TitaniumBoot.showLoginFormError failed.\n"); }
	}
	return Qnil;
}

extern "C" VALUE TitaniumBoot_showSignupForm (
	VALUE self)
{
	debug("TitaniumBoot.showSignupForm\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		VALUE argv[] = {};


		
		if (InvokeJsCallback(command, command->jsObject, "showSignupForm",
			ARRAYSIZE(argv), argv, NULL))
		{
			debug("TitaniumBoot.showSignupForm succeeded.\n");
		} else { debug("TitaniumBoot.showSignupForm failed.\n"); }
	}
	return Qnil;
}

extern "C" VALUE TitaniumBoot_showVerificationForm (
	VALUE self)
{
	debug("TitaniumBoot.showVerificationForm\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		VALUE argv[] = {};


		
		if (InvokeJsCallback(command, command->jsObject, "showVerificationForm",
			ARRAYSIZE(argv), argv, NULL))
		{
			debug("TitaniumBoot.showVerificationForm succeeded.\n");
		} else { debug("TitaniumBoot.showVerificationForm failed.\n"); }
	}
	return Qnil;
}

extern "C" VALUE TitaniumBoot_showVerificationFormError (
	VALUE self, 
	VALUE message)
{
	debug("TitaniumBoot.showVerificationFormError\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		VALUE argv[] = {message};


		
		if (InvokeJsCallback(command, command->jsObject, "showVerificationFormError",
			ARRAYSIZE(argv), argv, NULL))
		{
			debug("TitaniumBoot.showVerificationFormError succeeded.\n");
		} else { debug("TitaniumBoot.showVerificationFormError failed.\n"); }
	}
	return Qnil;
}

extern "C" VALUE TitaniumBoot_finishedCreatingProject (
	VALUE self, 
	VALUE projectName, 
	VALUE directory)
{
	debug("TitaniumBoot.finishedCreatingProject\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		VALUE argv[] = {projectName, directory};


		
		if (InvokeJsCallback(command, command->jsObject, "finishedCreatingProject",
			ARRAYSIZE(argv), argv, NULL))
		{
			debug("TitaniumBoot.finishedCreatingProject succeeded.\n");
		} else { debug("TitaniumBoot.finishedCreatingProject failed.\n"); }
	}
	return Qnil;
}

extern "C" VALUE TitaniumBoot_openProgress (
	VALUE self, 
	VALUE id, 
	VALUE max)
{
	debug("TitaniumBoot.openProgress\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		VALUE argv[] = {id, max};


		
		if (InvokeJsCallback(command, command->jsObject, "openProgress",
			ARRAYSIZE(argv), argv, NULL))
		{
			debug("TitaniumBoot.openProgress succeeded.\n");
		} else { debug("TitaniumBoot.openProgress failed.\n"); }
	}
	return Qnil;
}

extern "C" VALUE TitaniumBoot_setProgressMessage (
	VALUE self, 
	VALUE id, 
	VALUE message)
{
	debug("TitaniumBoot.setProgressMessage\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		VALUE argv[] = {id, message};


		
		if (InvokeJsCallback(command, command->jsObject, "setProgressMessage",
			ARRAYSIZE(argv), argv, NULL))
		{
			debug("TitaniumBoot.setProgressMessage succeeded.\n");
		} else { debug("TitaniumBoot.setProgressMessage failed.\n"); }
	}
	return Qnil;
}

extern "C" VALUE TitaniumBoot_incrementProgress (
	VALUE self, 
	VALUE id, 
	VALUE amount)
{
	debug("TitaniumBoot.incrementProgress\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		VALUE argv[] = {id, amount};


		
		if (InvokeJsCallback(command, command->jsObject, "incrementProgress",
			ARRAYSIZE(argv), argv, NULL))
		{
			debug("TitaniumBoot.incrementProgress succeeded.\n");
		} else { debug("TitaniumBoot.incrementProgress failed.\n"); }
	}
	return Qnil;
}

extern "C" VALUE TitaniumBoot_closeProgress (
	VALUE self, 
	VALUE id)
{
	debug("TitaniumBoot.closeProgress\n");

	AppCommand *command = NULL;
	Data_Get_Struct(self, AppCommand, command);
	
	if (command != NULL && command->jsObject != NULL) {
		VALUE argv[] = {id};


		
		if (InvokeJsCallback(command, command->jsObject, "closeProgress",
			ARRAYSIZE(argv), argv, NULL))
		{
			debug("TitaniumBoot.closeProgress succeeded.\n");
		} else { debug("TitaniumBoot.closeProgress failed.\n"); }
	}
	return Qnil;
}

VALUE TitaniumBoot_Class;
void AppCommand::DefineClasses()
{
	debug("DefineClasses");
	TitaniumBoot_Class = rb_define_class("TitaniumBoot", rb_cObject);
	rb_define_singleton_method(TitaniumBoot_Class, "new", RUBY_FUNCTION(TitaniumBoot_new), 0);
	
	rb_define_method(TitaniumBoot_Class, "confirm", RUBY_FUNCTION(TitaniumBoot_confirm), 2);
	rb_define_method(TitaniumBoot_Class, "confirmInstallComponents", RUBY_FUNCTION(TitaniumBoot_confirmInstallComponents), 1);
	rb_define_method(TitaniumBoot_Class, "info", RUBY_FUNCTION(TitaniumBoot_info), 1);
	rb_define_method(TitaniumBoot_Class, "debug", RUBY_FUNCTION(TitaniumBoot_debug), 1);
	rb_define_method(TitaniumBoot_Class, "error", RUBY_FUNCTION(TitaniumBoot_error), 1);
	rb_define_method(TitaniumBoot_Class, "die", RUBY_FUNCTION(TitaniumBoot_die), 1);
	rb_define_method(TitaniumBoot_Class, "askForProxy", RUBY_FUNCTION(TitaniumBoot_askForProxy), 0);
	rb_define_method(TitaniumBoot_Class, "showLoginForm", RUBY_FUNCTION(TitaniumBoot_showLoginForm), 0);
	rb_define_method(TitaniumBoot_Class, "showLoginFormError", RUBY_FUNCTION(TitaniumBoot_showLoginFormError), 1);
	rb_define_method(TitaniumBoot_Class, "showSignupForm", RUBY_FUNCTION(TitaniumBoot_showSignupForm), 0);
	rb_define_method(TitaniumBoot_Class, "showVerificationForm", RUBY_FUNCTION(TitaniumBoot_showVerificationForm), 0);
	rb_define_method(TitaniumBoot_Class, "showVerificationFormError", RUBY_FUNCTION(TitaniumBoot_showVerificationFormError), 1);
	rb_define_method(TitaniumBoot_Class, "finishedCreatingProject", RUBY_FUNCTION(TitaniumBoot_finishedCreatingProject), 2);
	rb_define_method(TitaniumBoot_Class, "openProgress", RUBY_FUNCTION(TitaniumBoot_openProgress), 2);
	rb_define_method(TitaniumBoot_Class, "setProgressMessage", RUBY_FUNCTION(TitaniumBoot_setProgressMessage), 2);
	rb_define_method(TitaniumBoot_Class, "incrementProgress", RUBY_FUNCTION(TitaniumBoot_incrementProgress), 2);
	rb_define_method(TitaniumBoot_Class, "closeProgress", RUBY_FUNCTION(TitaniumBoot_closeProgress), 1);
}
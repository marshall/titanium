/*
 * WARNING this file was generated by Appcelerator's idl2npapi
 */
 
#ifndef _${interface.name?upper_case}_NP_H
#define _${interface.name?upper_case}_NP_H

#include <npapi.h>
#include <npruntime.h>
#include <npfunctions.h>
#include <string>

static void ${interface.name}_pluginInvalidate(NPObject *obj);
static bool ${interface.name}_pluginHasProperty(NPObject *obj, NPIdentifier name);
static bool ${interface.name}_pluginHasMethod(NPObject *obj, NPIdentifier name);
static bool ${interface.name}_pluginGetProperty(NPObject *obj, NPIdentifier name, NPVariant *variant);
static bool ${interface.name}_pluginSetProperty(NPObject *obj, NPIdentifier name, const NPVariant *variant);
static bool ${interface.name}_pluginInvoke(NPObject *obj, NPIdentifier name, const NPVariant *args, uint32_t argCount, NPVariant *result);
static bool ${interface.name}_pluginInvokeDefault(NPObject *obj, const NPVariant *args, uint32_t argCount, NPVariant *result);
static NPObject* ${interface.name}_pluginAllocate(NPP npp, NPClass *theClass);
static void ${interface.name}_pluginDeallocate(NPObject *obj);
static bool ${interface.name}_pluginRemoveProperty (NPObject *npobj, NPIdentifier name);
static bool ${interface.name}_pluginEnumerate (NPObject *npobj, NPIdentifier **value, uint32_t *count);

static NPClass ${interface.name}_pluginClass = {
NP_CLASS_STRUCT_VERSION,
${interface.name}_pluginAllocate,
${interface.name}_pluginDeallocate,
${interface.name}_pluginInvalidate,
${interface.name}_pluginHasMethod,
${interface.name}_pluginInvoke,
${interface.name}_pluginInvokeDefault,
${interface.name}_pluginHasProperty,
${interface.name}_pluginGetProperty,
${interface.name}_pluginSetProperty,
${interface.name}_pluginRemoveProperty
};

enum {
<#list interface.attributes as attribute>
	_${interface.name}_${attribute.name},
</#list>
	_${interface.name}_NumberOfProperties
};

static NPIdentifier _${interface.name}_pluginPropertyIdentifiers[_${interface.name}_NumberOfProperties];
static const NPUTF8 *_${interface.name}_pluginPropertyIdentifierNames[_${interface.name}_NumberOfProperties] = {
<#list interface.attributes as attribute>
	"${attribute.name}"<#if attribute_index &lt; interface.attributes?size-1>,</#if>
</#list>
};

enum {
<#list interface.methods as method>
	_${interface.name}_${method.name},
</#list>
	_${interface.name}_NumberOfMethods
};

static NPIdentifier _${interface.name}_pluginMethodIdentifiers[_${interface.name}_NumberOfMethods];
static const NPUTF8 *_${interface.name}_pluginMethodIdentifierNames[_${interface.name}_NumberOfMethods] = {
<#list interface.methods as method>
	"${method.name}"<#if method_index < interface.methods?size-1>,</#if>
</#list>
};

#endif
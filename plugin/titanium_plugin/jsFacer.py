# jsFacer.py -- Titanium's Javascript generator for scintilla's public interface from the "Scintilla.iface" found in the scintilla distribution
# This is meant to work with Appcelerator's Titanium NPAPI stubs.
#
# Copyright (c) 2008 Appcelerator, Inc.
# Author: Marshall Culpepper

import string
import sys
import os
from os.path import *

scintillaFilesPath = abspath(join(split(sys.argv[0])[0], "../../scintilla/include"))
sys.path.insert(0, scintillaFilesPath)
import Face

def Contains(s,sub):
	return string.find(s, sub) != -1

def printConstantsJSFile(f,out):
	for name in f.order:
		v = f.features[name]
		if v["FeatureType"] in ["val"]:
			if Contains(name, "SCE_") or Contains(name, "SCLEX_"):
				out.write("Appcelerator.Titanium.Constants." + name + " = " + v["Value"] + ";\n")
		if v["Category"] != "Deprecated":
			if v["FeatureType"] in ["fun", "get", "set"]:
				featureDefineName = "SCI_" + string.upper(name)
				out.write("Appcelerator.Titanium.Constants." + featureDefineName + " = " + v["Value"] + ";\n")
			elif v["FeatureType"] in ["evt"]:
				featureDefineName = "SCN_" + string.upper(name)
				out.write("Appcelerator.Titanium.Constants." + featureDefineName + " = " + v["Value"] + ";\n")
			elif v["FeatureType"] in ["val"]:
				if not (Contains(name, "SCE_") or Contains(name, "SCLEX_")):
					out.write("Appcelerator.Titanium.Constants." + name + " = " + v["Value"] + ";\n")

def CopyWithInsertion(input, output, genfn, definition):
	copying = 1
	for line in input.readlines():
		if copying:
			output.write(line)
		if Contains(line, "//++Autogenerated"):
			copying = 0
			genfn(definition, output)
		if Contains(line, "//--Autogenerated"):
			copying = 1
			output.write(line)

def contents(filename):
	try:
		f = file(filename)
		t = f.read()
		f.close()
		return t
	except:
		return None

def Regenerate(filename, genfn, definition):
	inText = contents(filename)
	tempname = "jsFacer.tmp"
	out = open(tempname,"w+")
	hfile = open(filename)
	CopyWithInsertion(hfile, out, genfn, definition)
	out.close()
	hfile.close()
	outText = contents(tempname)
	if inText == outText:
		os.unlink(tempname)
	else:
		os.unlink(filename)
		os.rename(tempname, filename)

f = Face.Face()
try:
	f.ReadFromFile(join(scintillaFilesPath, "Scintilla.iface"))
	Regenerate("titanium_constants.js", printConstantsJSFile, f)
	print "Maximum ID is", max([x for x in f.values if int(x) < 3000])
except:
	raise

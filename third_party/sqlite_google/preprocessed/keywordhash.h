/***** This file contains automatically generated code ******
**
** The code in this file has been automatically generated by
**
**     $Header: /sqlite/sqlite/tool/mkkeywordhash.c,v 1.30 2007/05/04 18:30:41 drh Exp $
**
** The code in this file implements a function that determines whether
** or not a given identifier is really an SQL keyword.  The same thing
** might be implemented more directly using a hand-written hash table.
** But by using this automatically generated code, the size of the code
** is substantially reduced.  This is important for embedded applications
** on platforms with limited memory.
*/
/* Hash score: 159 */
static int keywordCode(const char *z, int n){
  /* zText[] encodes 752 bytes of keywords in 506 bytes */
  static const char zText[506] =
    "BEFOREIGNOREGEXPLAINSTEADDESCAPEACHECKEYCONSTRAINTERSECTABLEFT"
    "HENDEFERRABLELSELECTRANSACTIONATURALTERAISEXCEPTRIGGEREFERENCES"
    "UNIQUERYBEGINNEREINDEXCLUSIVEXISTSBETWEENOTNULLIKECASCADELETE"
    "MPORARYCASECOLLATECREATECURRENT_DATEGROUPDATEIMMEDIATEJOINSERT"
    "MATCHAVINGLOBYPLANALYZEPRAGMABORTVALUESVIRTUALIMITWHENWHERENAME"
    "AFTEREPLACEANDEFAULTAUTOINCREMENTCASTCOLUMNCOMMITCONFLICTCROSS"
    "CURRENT_TIMESTAMPRIMARYDEFERREDISTINCTDROPFAILFROMFULLIFINTOFFSET"
    "ISNULLORDERESTRICTOUTERIGHTROLLBACKROWUNIONUSINGVACUUMVIEWINITIALLY"
  ;
  static const unsigned char aHash[127] = {
      59,  91, 106,  57,   0,  48,   0,   0,  68,   0,  60,   0,   0,
      99,   4,  64,   7,   0, 105,  71, 100,  96,   0,  22,   0,   0,
     110,   0, 108, 103,   0,  18,  79,   0,   1,   0,   0,  52,  53,
       0,  51,  11,   0,  32,  76,  88,   0, 107,  87,   0,   0,  49,
       0,  89,  20,   0,   0,   0, 111,   0,  19,   0,  10,  62,  21,
      82,   0,   0, 113,  92,  39, 112,  33,  12,  55,   0,  77,   0,
      86,  28,   0,  85,   0,   0,   0,  81,  78,  83,  74,  95,   6,
      14,  94,   0,  67,   0,  45,  75,  73,  27,   0, 109,  66, 101,
      41,  50,  70,   0,   0,  80,  97,   0, 104,   0,  15,   0,   0,
      24,   0,  72,  34,  42,   0,  16,  40,   0,  56,
  };
  static const unsigned char aNext[113] = {
       0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,
       0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      25,   0,   0,  30,   0,   0,   0,   0,   0,  37,  17,  35,  44,
       0,   0,  36,  31,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,  43,   0,   0,   0,  63,  26,   0,   8,  38,   2,
       0,   0,   0,   0,   0,   0,   0,   3,  54,  65,   0,  13,   0,
      90,  84,   0,  93,   0,   0,  58,   0,  61,  98,   0,   0, 102,
      23,  29,  46,  69,   0,   0,  47,   0,   0,
  };
  static const unsigned char aLen[113] = {
       6,   7,   3,   6,   6,   7,   7,   3,   4,   6,   4,   5,   3,
      10,   9,   5,   4,   4,   3,  10,   4,   6,  11,   2,   7,   5,
       5,   6,   7,  10,   6,   5,   5,   5,   7,   5,   9,   6,   7,
       7,   3,   4,   4,   7,   2,   3,   6,   4,   9,   2,   4,   7,
       6,  12,   5,   6,   9,   4,   6,   5,   6,   4,   2,   4,   7,
       6,   5,   6,   7,   5,   4,   5,   6,   5,   7,   3,   7,  13,
       2,   2,   4,   6,   6,   8,   5,  17,  12,   7,   8,   8,   2,
       4,   4,   4,   4,   2,   4,   6,   2,   3,   6,   5,   8,   5,
       5,   8,   3,   5,   5,   6,   4,   9,   3,
  };
  static const unsigned short int aOffset[113] = {
       0,   2,   2,   6,  10,  13,  18,  23,  25,  26,  31,  33,  37,
      40,  47,  55,  58,  61,  63,  65,  74,  76,  81,  90,  91,  96,
     100, 104, 109, 115, 125, 128, 133, 136, 140, 142, 145, 153, 159,
     165, 165, 168, 171, 175, 176, 176, 180, 184, 184, 188, 193, 197,
     204, 210, 222, 225, 231, 240, 242, 248, 252, 257, 260, 262, 264,
     271, 276, 281, 287, 293, 298, 302, 305, 311, 315, 322, 324, 331,
     333, 335, 344, 348, 354, 360, 368, 373, 373, 389, 396, 403, 404,
     411, 415, 419, 423, 427, 429, 432, 432, 435, 438, 444, 448, 456,
     460, 465, 473, 476, 481, 486, 492, 496, 501,
  };
  static const unsigned char aCode[113] = {
    TK_BEFORE,     TK_FOREIGN,    TK_FOR,        TK_IGNORE,     TK_LIKE_KW,    
    TK_EXPLAIN,    TK_INSTEAD,    TK_ADD,        TK_DESC,       TK_ESCAPE,     
    TK_EACH,       TK_CHECK,      TK_KEY,        TK_CONSTRAINT, TK_INTERSECT,  
    TK_TABLE,      TK_JOIN_KW,    TK_THEN,       TK_END,        TK_DEFERRABLE, 
    TK_ELSE,       TK_SELECT,     TK_TRANSACTION,TK_ON,         TK_JOIN_KW,    
    TK_ALTER,      TK_RAISE,      TK_EXCEPT,     TK_TRIGGER,    TK_REFERENCES, 
    TK_UNIQUE,     TK_QUERY,      TK_BEGIN,      TK_JOIN_KW,    TK_REINDEX,    
    TK_INDEX,      TK_EXCLUSIVE,  TK_EXISTS,     TK_BETWEEN,    TK_NOTNULL,    
    TK_NOT,        TK_NULL,       TK_LIKE_KW,    TK_CASCADE,    TK_AS,         
    TK_ASC,        TK_DELETE,     TK_TEMP,       TK_TEMP,       TK_OR,         
    TK_CASE,       TK_COLLATE,    TK_CREATE,     TK_CTIME_KW,   TK_GROUP,      
    TK_UPDATE,     TK_IMMEDIATE,  TK_JOIN,       TK_INSERT,     TK_MATCH,      
    TK_HAVING,     TK_LIKE_KW,    TK_BY,         TK_PLAN,       TK_ANALYZE,    
    TK_PRAGMA,     TK_ABORT,      TK_VALUES,     TK_VIRTUAL,    TK_LIMIT,      
    TK_WHEN,       TK_WHERE,      TK_RENAME,     TK_AFTER,      TK_REPLACE,    
    TK_AND,        TK_DEFAULT,    TK_AUTOINCR,   TK_TO,         TK_IN,         
    TK_CAST,       TK_COLUMNKW,   TK_COMMIT,     TK_CONFLICT,   TK_JOIN_KW,    
    TK_CTIME_KW,   TK_CTIME_KW,   TK_PRIMARY,    TK_DEFERRED,   TK_DISTINCT,   
    TK_IS,         TK_DROP,       TK_FAIL,       TK_FROM,       TK_JOIN_KW,    
    TK_IF,         TK_INTO,       TK_OFFSET,     TK_OF,         TK_SET,        
    TK_ISNULL,     TK_ORDER,      TK_RESTRICT,   TK_JOIN_KW,    TK_JOIN_KW,    
    TK_ROLLBACK,   TK_ROW,        TK_UNION,      TK_USING,      TK_VACUUM,     
    TK_VIEW,       TK_INITIALLY,  TK_ALL,        
  };
  int h, i;
  if( n<2 ) return TK_ID;
  h = ((charMap(z[0])*4) ^
      (charMap(z[n-1])*3) ^
      n) % 127;
  for(i=((int)aHash[h])-1; i>=0; i=((int)aNext[i])-1){
    if( aLen[i]==n && sqlite3StrNICmp(&zText[aOffset[i]],z,n)==0 ){
      return aCode[i];
    }
  }
  return TK_ID;
}
int sqlite3KeywordCode(const unsigned char *z, int n){
  return keywordCode((char*)z, n);
}
